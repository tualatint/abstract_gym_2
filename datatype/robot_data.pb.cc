// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RobotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotDataFrameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotDataFrameList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_robot_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_robot_5fdata_2eproto() {
  protobuf_AddDesc_robot_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robot_data.proto");
  GOOGLE_CHECK(file != NULL);
  RobotData_descriptor_ = file->message_type(0);
  static const int RobotData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, joint_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, joint_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, ee_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, target_ee_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, collision_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, done_flag_),
  };
  RobotData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RobotData_descriptor_,
      RobotData::default_instance_,
      RobotData_offsets_,
      -1,
      -1,
      -1,
      sizeof(RobotData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotData, _is_default_instance_));
  RobotDataFrameList_descriptor_ = file->message_type(1);
  static const int RobotDataFrameList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotDataFrameList, robot_data_frames_),
  };
  RobotDataFrameList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RobotDataFrameList_descriptor_,
      RobotDataFrameList::default_instance_,
      RobotDataFrameList_offsets_,
      -1,
      -1,
      -1,
      sizeof(RobotDataFrameList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotDataFrameList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotDataFrameList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robot_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RobotData_descriptor_, &RobotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RobotDataFrameList_descriptor_, &RobotDataFrameList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robot_5fdata_2eproto() {
  delete RobotData::default_instance_;
  delete RobotData_reflection_;
  delete RobotDataFrameList::default_instance_;
  delete RobotDataFrameList_reflection_;
}

void protobuf_AddDesc_robot_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_robot_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020robot_data.proto\"\251\001\n\tRobotData\022\027\n\017join"
    "t_positions\030\001 \003(\002\022\025\n\rjoint_actions\030\002 \003(\002"
    "\022\024\n\014EE_positions\030\003 \003(\002\022\033\n\023target_EE_posi"
    "tions\030\004 \003(\002\022\016\n\006reward\030\005 \001(\002\022\026\n\016collision"
    "_flag\030\006 \001(\010\022\021\n\tdone_flag\030\007 \001(\010\";\n\022RobotD"
    "ataFrameList\022%\n\021robot_data_frames\030\001 \003(\0132"
    "\n.RobotDatab\006proto3", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot_data.proto", &protobuf_RegisterTypes);
  RobotData::default_instance_ = new RobotData();
  RobotDataFrameList::default_instance_ = new RobotDataFrameList();
  RobotData::default_instance_->InitAsDefaultInstance();
  RobotDataFrameList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robot_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robot_5fdata_2eproto {
  StaticDescriptorInitializer_robot_5fdata_2eproto() {
    protobuf_AddDesc_robot_5fdata_2eproto();
  }
} static_descriptor_initializer_robot_5fdata_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotData::kJointPositionsFieldNumber;
const int RobotData::kJointActionsFieldNumber;
const int RobotData::kEEPositionsFieldNumber;
const int RobotData::kTargetEEPositionsFieldNumber;
const int RobotData::kRewardFieldNumber;
const int RobotData::kCollisionFlagFieldNumber;
const int RobotData::kDoneFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotData::RobotData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotData)
}

void RobotData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RobotData::RobotData(const RobotData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RobotData)
}

void RobotData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reward_ = 0;
  collision_flag_ = false;
  done_flag_ = false;
}

RobotData::~RobotData() {
  // @@protoc_insertion_point(destructor:RobotData)
  SharedDtor();
}

void RobotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotData_descriptor_;
}

const RobotData& RobotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fdata_2eproto();
  return *default_instance_;
}

RobotData* RobotData::default_instance_ = NULL;

RobotData* RobotData::New(::google::protobuf::Arena* arena) const {
  RobotData* n = new RobotData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotData::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RobotData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RobotData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reward_, done_flag_);

#undef ZR_HELPER_
#undef ZR_

  joint_positions_.Clear();
  joint_actions_.Clear();
  ee_positions_.Clear();
  target_ee_positions_.Clear();
}

bool RobotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float joint_positions = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_joint_positions())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_joint_positions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_joint_actions;
        break;
      }

      // repeated float joint_actions = 2;
      case 2: {
        if (tag == 18) {
         parse_joint_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_joint_actions())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_joint_actions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_EE_positions;
        break;
      }

      // repeated float EE_positions = 3;
      case 3: {
        if (tag == 26) {
         parse_EE_positions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ee_positions())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_ee_positions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target_EE_positions;
        break;
      }

      // repeated float target_EE_positions = 4;
      case 4: {
        if (tag == 34) {
         parse_target_EE_positions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_target_ee_positions())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_target_ee_positions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_reward;
        break;
      }

      // optional float reward = 5;
      case 5: {
        if (tag == 45) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_collision_flag;
        break;
      }

      // optional bool collision_flag = 6;
      case 6: {
        if (tag == 48) {
         parse_collision_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collision_flag_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_done_flag;
        break;
      }

      // optional bool done_flag = 7;
      case 7: {
        if (tag == 56) {
         parse_done_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_flag_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotData)
  return false;
#undef DO_
}

void RobotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotData)
  // repeated float joint_positions = 1;
  if (this->joint_positions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_joint_positions_cached_byte_size_);
  }
  for (int i = 0; i < this->joint_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->joint_positions(i), output);
  }

  // repeated float joint_actions = 2;
  if (this->joint_actions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_joint_actions_cached_byte_size_);
  }
  for (int i = 0; i < this->joint_actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->joint_actions(i), output);
  }

  // repeated float EE_positions = 3;
  if (this->ee_positions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ee_positions_cached_byte_size_);
  }
  for (int i = 0; i < this->ee_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->ee_positions(i), output);
  }

  // repeated float target_EE_positions = 4;
  if (this->target_ee_positions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_target_ee_positions_cached_byte_size_);
  }
  for (int i = 0; i < this->target_ee_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->target_ee_positions(i), output);
  }

  // optional float reward = 5;
  if (this->reward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->reward(), output);
  }

  // optional bool collision_flag = 6;
  if (this->collision_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->collision_flag(), output);
  }

  // optional bool done_flag = 7;
  if (this->done_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->done_flag(), output);
  }

  // @@protoc_insertion_point(serialize_end:RobotData)
}

::google::protobuf::uint8* RobotData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotData)
  // repeated float joint_positions = 1;
  if (this->joint_positions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _joint_positions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->joint_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->joint_positions(i), target);
  }

  // repeated float joint_actions = 2;
  if (this->joint_actions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _joint_actions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->joint_actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->joint_actions(i), target);
  }

  // repeated float EE_positions = 3;
  if (this->ee_positions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ee_positions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ee_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ee_positions(i), target);
  }

  // repeated float target_EE_positions = 4;
  if (this->target_ee_positions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _target_ee_positions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->target_ee_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->target_ee_positions(i), target);
  }

  // optional float reward = 5;
  if (this->reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->reward(), target);
  }

  // optional bool collision_flag = 6;
  if (this->collision_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->collision_flag(), target);
  }

  // optional bool done_flag = 7;
  if (this->done_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->done_flag(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RobotData)
  return target;
}

int RobotData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RobotData)
  int total_size = 0;

  // optional float reward = 5;
  if (this->reward() != 0) {
    total_size += 1 + 4;
  }

  // optional bool collision_flag = 6;
  if (this->collision_flag() != 0) {
    total_size += 1 + 1;
  }

  // optional bool done_flag = 7;
  if (this->done_flag() != 0) {
    total_size += 1 + 1;
  }

  // repeated float joint_positions = 1;
  {
    int data_size = 0;
    data_size = 4 * this->joint_positions_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _joint_positions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float joint_actions = 2;
  {
    int data_size = 0;
    data_size = 4 * this->joint_actions_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _joint_actions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float EE_positions = 3;
  {
    int data_size = 0;
    data_size = 4 * this->ee_positions_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ee_positions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float target_EE_positions = 4;
  {
    int data_size = 0;
    data_size = 4 * this->target_ee_positions_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _target_ee_positions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RobotData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotData)
    MergeFrom(*source);
  }
}

void RobotData::MergeFrom(const RobotData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  joint_positions_.MergeFrom(from.joint_positions_);
  joint_actions_.MergeFrom(from.joint_actions_);
  ee_positions_.MergeFrom(from.ee_positions_);
  target_ee_positions_.MergeFrom(from.target_ee_positions_);
  if (from.reward() != 0) {
    set_reward(from.reward());
  }
  if (from.collision_flag() != 0) {
    set_collision_flag(from.collision_flag());
  }
  if (from.done_flag() != 0) {
    set_done_flag(from.done_flag());
  }
}

void RobotData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotData::CopyFrom(const RobotData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotData::IsInitialized() const {

  return true;
}

void RobotData::Swap(RobotData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotData::InternalSwap(RobotData* other) {
  joint_positions_.UnsafeArenaSwap(&other->joint_positions_);
  joint_actions_.UnsafeArenaSwap(&other->joint_actions_);
  ee_positions_.UnsafeArenaSwap(&other->ee_positions_);
  target_ee_positions_.UnsafeArenaSwap(&other->target_ee_positions_);
  std::swap(reward_, other->reward_);
  std::swap(collision_flag_, other->collision_flag_);
  std::swap(done_flag_, other->done_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotData_descriptor_;
  metadata.reflection = RobotData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotData

// repeated float joint_positions = 1;
int RobotData::joint_positions_size() const {
  return joint_positions_.size();
}
void RobotData::clear_joint_positions() {
  joint_positions_.Clear();
}
 float RobotData::joint_positions(int index) const {
  // @@protoc_insertion_point(field_get:RobotData.joint_positions)
  return joint_positions_.Get(index);
}
 void RobotData::set_joint_positions(int index, float value) {
  joint_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:RobotData.joint_positions)
}
 void RobotData::add_joint_positions(float value) {
  joint_positions_.Add(value);
  // @@protoc_insertion_point(field_add:RobotData.joint_positions)
}
 const ::google::protobuf::RepeatedField< float >&
RobotData::joint_positions() const {
  // @@protoc_insertion_point(field_list:RobotData.joint_positions)
  return joint_positions_;
}
 ::google::protobuf::RepeatedField< float >*
RobotData::mutable_joint_positions() {
  // @@protoc_insertion_point(field_mutable_list:RobotData.joint_positions)
  return &joint_positions_;
}

// repeated float joint_actions = 2;
int RobotData::joint_actions_size() const {
  return joint_actions_.size();
}
void RobotData::clear_joint_actions() {
  joint_actions_.Clear();
}
 float RobotData::joint_actions(int index) const {
  // @@protoc_insertion_point(field_get:RobotData.joint_actions)
  return joint_actions_.Get(index);
}
 void RobotData::set_joint_actions(int index, float value) {
  joint_actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:RobotData.joint_actions)
}
 void RobotData::add_joint_actions(float value) {
  joint_actions_.Add(value);
  // @@protoc_insertion_point(field_add:RobotData.joint_actions)
}
 const ::google::protobuf::RepeatedField< float >&
RobotData::joint_actions() const {
  // @@protoc_insertion_point(field_list:RobotData.joint_actions)
  return joint_actions_;
}
 ::google::protobuf::RepeatedField< float >*
RobotData::mutable_joint_actions() {
  // @@protoc_insertion_point(field_mutable_list:RobotData.joint_actions)
  return &joint_actions_;
}

// repeated float EE_positions = 3;
int RobotData::ee_positions_size() const {
  return ee_positions_.size();
}
void RobotData::clear_ee_positions() {
  ee_positions_.Clear();
}
 float RobotData::ee_positions(int index) const {
  // @@protoc_insertion_point(field_get:RobotData.EE_positions)
  return ee_positions_.Get(index);
}
 void RobotData::set_ee_positions(int index, float value) {
  ee_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:RobotData.EE_positions)
}
 void RobotData::add_ee_positions(float value) {
  ee_positions_.Add(value);
  // @@protoc_insertion_point(field_add:RobotData.EE_positions)
}
 const ::google::protobuf::RepeatedField< float >&
RobotData::ee_positions() const {
  // @@protoc_insertion_point(field_list:RobotData.EE_positions)
  return ee_positions_;
}
 ::google::protobuf::RepeatedField< float >*
RobotData::mutable_ee_positions() {
  // @@protoc_insertion_point(field_mutable_list:RobotData.EE_positions)
  return &ee_positions_;
}

// repeated float target_EE_positions = 4;
int RobotData::target_ee_positions_size() const {
  return target_ee_positions_.size();
}
void RobotData::clear_target_ee_positions() {
  target_ee_positions_.Clear();
}
 float RobotData::target_ee_positions(int index) const {
  // @@protoc_insertion_point(field_get:RobotData.target_EE_positions)
  return target_ee_positions_.Get(index);
}
 void RobotData::set_target_ee_positions(int index, float value) {
  target_ee_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:RobotData.target_EE_positions)
}
 void RobotData::add_target_ee_positions(float value) {
  target_ee_positions_.Add(value);
  // @@protoc_insertion_point(field_add:RobotData.target_EE_positions)
}
 const ::google::protobuf::RepeatedField< float >&
RobotData::target_ee_positions() const {
  // @@protoc_insertion_point(field_list:RobotData.target_EE_positions)
  return target_ee_positions_;
}
 ::google::protobuf::RepeatedField< float >*
RobotData::mutable_target_ee_positions() {
  // @@protoc_insertion_point(field_mutable_list:RobotData.target_EE_positions)
  return &target_ee_positions_;
}

// optional float reward = 5;
void RobotData::clear_reward() {
  reward_ = 0;
}
 float RobotData::reward() const {
  // @@protoc_insertion_point(field_get:RobotData.reward)
  return reward_;
}
 void RobotData::set_reward(float value) {
  
  reward_ = value;
  // @@protoc_insertion_point(field_set:RobotData.reward)
}

// optional bool collision_flag = 6;
void RobotData::clear_collision_flag() {
  collision_flag_ = false;
}
 bool RobotData::collision_flag() const {
  // @@protoc_insertion_point(field_get:RobotData.collision_flag)
  return collision_flag_;
}
 void RobotData::set_collision_flag(bool value) {
  
  collision_flag_ = value;
  // @@protoc_insertion_point(field_set:RobotData.collision_flag)
}

// optional bool done_flag = 7;
void RobotData::clear_done_flag() {
  done_flag_ = false;
}
 bool RobotData::done_flag() const {
  // @@protoc_insertion_point(field_get:RobotData.done_flag)
  return done_flag_;
}
 void RobotData::set_done_flag(bool value) {
  
  done_flag_ = value;
  // @@protoc_insertion_point(field_set:RobotData.done_flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotDataFrameList::kRobotDataFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotDataFrameList::RobotDataFrameList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotDataFrameList)
}

void RobotDataFrameList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RobotDataFrameList::RobotDataFrameList(const RobotDataFrameList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RobotDataFrameList)
}

void RobotDataFrameList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RobotDataFrameList::~RobotDataFrameList() {
  // @@protoc_insertion_point(destructor:RobotDataFrameList)
  SharedDtor();
}

void RobotDataFrameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotDataFrameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotDataFrameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotDataFrameList_descriptor_;
}

const RobotDataFrameList& RobotDataFrameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fdata_2eproto();
  return *default_instance_;
}

RobotDataFrameList* RobotDataFrameList::default_instance_ = NULL;

RobotDataFrameList* RobotDataFrameList::New(::google::protobuf::Arena* arena) const {
  RobotDataFrameList* n = new RobotDataFrameList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotDataFrameList::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotDataFrameList)
  robot_data_frames_.Clear();
}

bool RobotDataFrameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotDataFrameList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RobotData robot_data_frames = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_robot_data_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robot_data_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_robot_data_frames;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotDataFrameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotDataFrameList)
  return false;
#undef DO_
}

void RobotDataFrameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotDataFrameList)
  // repeated .RobotData robot_data_frames = 1;
  for (unsigned int i = 0, n = this->robot_data_frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robot_data_frames(i), output);
  }

  // @@protoc_insertion_point(serialize_end:RobotDataFrameList)
}

::google::protobuf::uint8* RobotDataFrameList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotDataFrameList)
  // repeated .RobotData robot_data_frames = 1;
  for (unsigned int i = 0, n = this->robot_data_frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->robot_data_frames(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RobotDataFrameList)
  return target;
}

int RobotDataFrameList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RobotDataFrameList)
  int total_size = 0;

  // repeated .RobotData robot_data_frames = 1;
  total_size += 1 * this->robot_data_frames_size();
  for (int i = 0; i < this->robot_data_frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robot_data_frames(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotDataFrameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotDataFrameList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RobotDataFrameList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotDataFrameList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotDataFrameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotDataFrameList)
    MergeFrom(*source);
  }
}

void RobotDataFrameList::MergeFrom(const RobotDataFrameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotDataFrameList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  robot_data_frames_.MergeFrom(from.robot_data_frames_);
}

void RobotDataFrameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotDataFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotDataFrameList::CopyFrom(const RobotDataFrameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotDataFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotDataFrameList::IsInitialized() const {

  return true;
}

void RobotDataFrameList::Swap(RobotDataFrameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotDataFrameList::InternalSwap(RobotDataFrameList* other) {
  robot_data_frames_.UnsafeArenaSwap(&other->robot_data_frames_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotDataFrameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotDataFrameList_descriptor_;
  metadata.reflection = RobotDataFrameList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotDataFrameList

// repeated .RobotData robot_data_frames = 1;
int RobotDataFrameList::robot_data_frames_size() const {
  return robot_data_frames_.size();
}
void RobotDataFrameList::clear_robot_data_frames() {
  robot_data_frames_.Clear();
}
const ::RobotData& RobotDataFrameList::robot_data_frames(int index) const {
  // @@protoc_insertion_point(field_get:RobotDataFrameList.robot_data_frames)
  return robot_data_frames_.Get(index);
}
::RobotData* RobotDataFrameList::mutable_robot_data_frames(int index) {
  // @@protoc_insertion_point(field_mutable:RobotDataFrameList.robot_data_frames)
  return robot_data_frames_.Mutable(index);
}
::RobotData* RobotDataFrameList::add_robot_data_frames() {
  // @@protoc_insertion_point(field_add:RobotDataFrameList.robot_data_frames)
  return robot_data_frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::RobotData >*
RobotDataFrameList::mutable_robot_data_frames() {
  // @@protoc_insertion_point(field_mutable_list:RobotDataFrameList.robot_data_frames)
  return &robot_data_frames_;
}
const ::google::protobuf::RepeatedPtrField< ::RobotData >&
RobotDataFrameList::robot_data_frames() const {
  // @@protoc_insertion_point(field_list:RobotDataFrameList.robot_data_frames)
  return robot_data_frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
